{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyspotter: Simple CLI for SofarOcean API \u00b6 SofarOcean is creating one of the largest commercial ocean observation grids with its smart buoys (spotters) & smart mooring. Spotter delivers high-fidelity, real-time wave, wind, and temperature data from anywhere. Sofar is also focused on providing this dataset to researchers and users of the data and this tool was an attemp to simple parse spotter information. They also have an offical client for doing many of these functions which can be found here sofar-api-client-python . You can also find their indepth API and documentation here This tool is an attempt to parse out some of the basic functionalities of the API including but not limited to tool like authentication protocols, token reset and data export for easy use in other platforms like google earth engine. Disclaimer: This is an unofficial tool. Is not licensed or endorsed by SofarOcean. It is created and maintained by Samapriya Roy. Citation \u00b6 Samapriya Roy. (2021). samapriya/pyspotter: Simple CLI for SofarOcean API (0.0.6). Zenodo. https://doi.org/10.5281/zenodo.5805519","title":"Introduction"},{"location":"#pyspotter-simple-cli-for-sofarocean-api","text":"SofarOcean is creating one of the largest commercial ocean observation grids with its smart buoys (spotters) & smart mooring. Spotter delivers high-fidelity, real-time wave, wind, and temperature data from anywhere. Sofar is also focused on providing this dataset to researchers and users of the data and this tool was an attemp to simple parse spotter information. They also have an offical client for doing many of these functions which can be found here sofar-api-client-python . You can also find their indepth API and documentation here This tool is an attempt to parse out some of the basic functionalities of the API including but not limited to tool like authentication protocols, token reset and data export for easy use in other platforms like google earth engine. Disclaimer: This is an unofficial tool. Is not licensed or endorsed by SofarOcean. It is created and maintained by Samapriya Roy.","title":"pyspotter: Simple CLI for SofarOcean API"},{"location":"#citation","text":"Samapriya Roy. (2021). samapriya/pyspotter: Simple CLI for SofarOcean API (0.0.6). Zenodo. https://doi.org/10.5281/zenodo.5805519","title":"Citation"},{"location":"changelog/","text":"Changelog \u00b6 v0.0.5 \u00b6 added sea surface temperature parsing for spot data minor general improvements v0.0.4 \u00b6 added spot id to spot data export and metadata gracefully handles missing data and better error handling general improvements v0.0.3 \u00b6 added spot check tool to get latest info about spotter spot data now exports CSV after grouping by date general improvements v0.0.2 \u00b6 added time zone parser from spotter lat long now prints UTC and local time for spotter pretty prints output","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v005","text":"added sea surface temperature parsing for spot data minor general improvements","title":"v0.0.5"},{"location":"changelog/#v004","text":"added spot id to spot data export and metadata gracefully handles missing data and better error handling general improvements","title":"v0.0.4"},{"location":"changelog/#v003","text":"added spot check tool to get latest info about spotter spot data now exports CSV after grouping by date general improvements","title":"v0.0.3"},{"location":"changelog/#v002","text":"added time zone parser from spotter lat long now prints UTC and local time for spotter pretty prints output","title":"v0.0.2"},{"location":"installation/","text":"General Installation \u00b6 This assumes that you have native python & pip installed in your system, you can test this by going to the terminal (or windows command prompt) and trying python and then pip list pyspotter only support Python v3.4 or higher To install pyspotter: Simple CLI for SofarOcean API you can install using two methods. pip install pyspotter or you can also try git clone https://github.com/samapriya/pyspotter.git cd pyspotter python setup.py install For Linux use sudo or try pip install pyspotter --user . I recommend installation within a virtual environment. Find more information on creating virtual environments here . Getting started \u00b6 As usual, to print help: pyspotter -h usage: pyspotter [-h] {auth,reset,devlist,spot-check,spot-data} ... Simple CLI for Sofarocean API positional arguments: {auth,reset,devlist,spot-check,spot-data} auth Authenticates and saves your API token reset Regenerates your API token devlist Print lists of devices available under your account spot-check Spot check a Spotter location and time spot-data Export Spotter Data based on Spotter ID & grouped by date optional arguments: -h, --help show this help message and exit","title":"General Installation"},{"location":"installation/#general-installation","text":"This assumes that you have native python & pip installed in your system, you can test this by going to the terminal (or windows command prompt) and trying python and then pip list pyspotter only support Python v3.4 or higher To install pyspotter: Simple CLI for SofarOcean API you can install using two methods. pip install pyspotter or you can also try git clone https://github.com/samapriya/pyspotter.git cd pyspotter python setup.py install For Linux use sudo or try pip install pyspotter --user . I recommend installation within a virtual environment. Find more information on creating virtual environments here .","title":"General Installation"},{"location":"installation/#getting-started","text":"As usual, to print help: pyspotter -h usage: pyspotter [-h] {auth,reset,devlist,spot-check,spot-data} ... Simple CLI for Sofarocean API positional arguments: {auth,reset,devlist,spot-check,spot-data} auth Authenticates and saves your API token reset Regenerates your API token devlist Print lists of devices available under your account spot-check Spot check a Spotter location and time spot-data Export Spotter Data based on Spotter ID & grouped by date optional arguments: -h, --help show this help message and exit","title":"Getting started"},{"location":"license/","text":"MIT License https://opensource.org/licenses/MIT Copyright \u00a9 2021 Samapriya Roy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"projects/auth/","text":"Authenticate \u00b6 This tool allows you to save your authentication token, this is then used for authentication for requests. This uses your email and your password to fetch the token. pyspotter auth","title":"Authenticate"},{"location":"projects/auth/#authenticate","text":"This tool allows you to save your authentication token, this is then used for authentication for requests. This uses your email and your password to fetch the token. pyspotter auth","title":"Authenticate"},{"location":"projects/device-export/","text":"Data export \u00b6 This tool was designed to get the datasets out of the spotter. It seems that API currently limited temporal data, and the best way to group seemed to be using dates. This script uses the result JSON objects, and adds a date field from the timestamp to make the grouping easy, since timestamps are unique. This then writes these CSV file with column headers and can export both wind and wave data as needed. usage: pyspotter spot-data [-h] --sid SID --dtype DTYPE --folder FOLDER optional arguments: -h, --help show this help message and exit Required named arguments.: --sid SID Spotter ID --dtype DTYPE Data type: wind/wave/sst --folder FOLDER Folder to export CSV data Sample setup would be pyspotter spot-data --sid 1234 --dtype wave --folder \"full path to folder\"","title":"Data export"},{"location":"projects/device-export/#data-export","text":"This tool was designed to get the datasets out of the spotter. It seems that API currently limited temporal data, and the best way to group seemed to be using dates. This script uses the result JSON objects, and adds a date field from the timestamp to make the grouping easy, since timestamps are unique. This then writes these CSV file with column headers and can export both wind and wave data as needed. usage: pyspotter spot-data [-h] --sid SID --dtype DTYPE --folder FOLDER optional arguments: -h, --help show this help message and exit Required named arguments.: --sid SID Spotter ID --dtype DTYPE Data type: wind/wave/sst --folder FOLDER Folder to export CSV data Sample setup would be pyspotter spot-data --sid 1234 --dtype wave --folder \"full path to folder\"","title":"Data export"},{"location":"projects/devlist/","text":"Device list \u00b6 This tool will simply print the names of all devices to which you have access, instead of trying to remember the list. This tool requires no user input. usage: pyspotter devlist [-h] optional arguments: -h, --help show this help message and exit usage is simply pyspotter devlist","title":"Device list"},{"location":"projects/devlist/#device-list","text":"This tool will simply print the names of all devices to which you have access, instead of trying to remember the list. This tool requires no user input. usage: pyspotter devlist [-h] optional arguments: -h, --help show this help message and exit usage is simply pyspotter devlist","title":"Device list"},{"location":"projects/reset/","text":"Token reset \u00b6 For some reason if you need to reset your token , this will allow you to use your current authentication to reset and fetch your new token. This requires no user input pyspotter reset","title":"Token reset"},{"location":"projects/reset/#token-reset","text":"For some reason if you need to reset your token , this will allow you to use your current authentication to reset and fetch your new token. This requires no user input pyspotter reset","title":"Token reset"},{"location":"projects/spot-check/","text":"Spot check spotter \u00b6 This tool is built to fetch simply the latest information from the spotter including battery, humidity, power and lat long. Since these spotter can move across multiple time zones, it uses the lat long to estimate the time zone and converts the UTC time to local time for the spotter. pyspotter spot-check -h usage: pyspotter spot-check [-h] --sid SID optional arguments: -h, --help show this help message and exit Required named arguments.: --sid SID Spotter ID Example usage would be pyspotter spot-check --sid 0320","title":"Spot check spotter"},{"location":"projects/spot-check/#spot-check-spotter","text":"This tool is built to fetch simply the latest information from the spotter including battery, humidity, power and lat long. Since these spotter can move across multiple time zones, it uses the lat long to estimate the time zone and converts the UTC time to local time for the spotter. pyspotter spot-check -h usage: pyspotter spot-check [-h] --sid SID optional arguments: -h, --help show this help message and exit Required named arguments.: --sid SID Spotter ID Example usage would be pyspotter spot-check --sid 0320","title":"Spot check spotter"}]}